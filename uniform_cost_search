import heapq

# uniform cost function
# returns the minimum cost (Bonus: returns path to minimum cost as well)
def uniform_cost_search(start, goal, graph, cost):
    
    # Initialize the priority queue with the starting node
    pq = [(0, start, [])]
    
    # Initialize a set to keep track of nodes visited
    visited = set()
    
    # Initialize the answer
    answer = {node: {'cost': float('inf'), 'path': []} for node in goal}
    
    while pq:
        current_cost, current_node, current_path = heapq.heappop(pq)

        # skip if we visited
        if current_node in visited:
            continue
        
        # Add the current node to the visited set
        visited.add(current_node)

        # If the current node is one of the goal nodes
        if current_node in goal:
            
            # Update the answer 
            answer[current_node]['cost'] = current_cost
            answer[current_node]['path'] = current_path + [current_node]

        # Explore neighbors of the current node
        for neighbor in graph[current_node]:
            
            # Calculate the cost to reach the neighbor
            neighbor_cost = current_cost + cost.get((current_node, neighbor), float('inf'))
            
            # Push the neighbor and its cost to the priority queue
            heapq.heappush(pq, (neighbor_cost, neighbor, current_path + [current_node]))

    return answer
 
# main function
if __name__ == '__main__':
     
    # create a graph with no more than 30 nodes
    graph, cost = [[] for i in range(30)], {}
 
    # add edges to the graph
    graph[0].append(4)
    graph[0].append(5)
    graph[0].append(16)
    graph[2].append(1)
    graph[3].append(1)
    graph[4].append(2)
    graph[4].append(3)
    graph[4].append(5)
    graph[5].append(8)
    graph[5].append(18)
    graph[6].append(3)
    graph[6].append(7)
    graph[8].append(16)
    graph[8].append(17)
    graph[16].append(17)
    graph[18].append(6)
    
 
    # add cost to each edge
    cost[(0, 4)] = 3
    cost[(0, 5)] = 9
    cost[(0, 16)] = 1
    cost[(2, 1)] = 2
    cost[(3, 1)] = 2
    cost[(4, 2)] = 1
    cost[(4, 3)] = 8
    cost[(4, 5)] = 2
    cost[(5, 8)] = 3
    cost[(5, 18)] = 2
    cost[(6, 3)] = 3
    cost[(6, 7)] = 2
    cost[(8, 16)] = 4
    cost[(8, 17)] = 4
    cost[(16, 17)] = 15
    cost[(18, 6)] = 1
    
    # set start state 
    start = 0
    
    # set goal state, there can be multiple goal states
    goal = [3]
    
    # call uniform_search_cost function to get the minimum cost to reach gaol. Bonus points for path
    
    # implement this function
    min_cost_info = uniform_cost_search(start, goal, graph, cost)

    for node, info in min_cost_info.items():
        print(f'Minimum cost from {start} to {node} is {info["cost"]}')
        print(f'Path: {" -> ".join(map(str, info["path"]))}')
